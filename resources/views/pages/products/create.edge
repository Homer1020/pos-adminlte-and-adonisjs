@let(pageTitle = product ? 'Editar Producto' : 'Crear Producto')
@layout.app({ title: "Crear Producto" })
  @slot('css')
    <link rel="stylesheet" href="/plugins/summernote/summernote-bs4.min.css">
  @endslot
  @slot('header')
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Productos</h1>
      </div><!-- /.col -->
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item"><a href="{{ route('products.index') }}">Productos</a></li>
          <li class="breadcrumb-item active">{{ pageTitle }}</li>
        </ol>
      </div><!-- /.col -->
    </div><!-- /.row -->
  @endslot
  @slot('main')
    <form class="row" action="{{ route('products.store') }}" method="POST" enctype="multipart/form-data">
      <div class="col-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title m-0">Detalles del producto</h5>
          </div>
          <div class="card-body">
            <div>
              {{ csrfField() }}

              @!form.select({
                name: 'category_id',
                data: categories,
                defaultOption: +old('category_id'),
                targetValue: 'id',
                targetText: 'display_name',
                label: 'Categoría'
              })

              @!form.input({
                name: 'name',
                value: old('name', ''),
                label: 'Nombre'
              })

              @!form.input({
                name: 'slug',
                value: old('slug', ''),
                label: 'Slug'
              })
              
              @!form.input({
                name: 'price',
                value: old('price', ''),
                label: 'Precio',
                type: 'number',
                step: '0.01'
              })

              @!form.textarea({
                name: 'description',
                value: old('description', ''),
                label: 'Descripción',
                rows: 5
              })

              <div class="form-group">
                <label for="#" class="form-label">Imágenes</label>
                <div class="custom-file">
                  <input multiple accept=".jpg,.png,.jpeg,.webp" type="file" class="custom-file-input {{ flashMessages.has('inputErrorsBag.images') ? 'is-invalid' : '' }}" id="customFile" name="images[]">
                  <label class="custom-file-label" for="customFile">Choose file</label>
                  @inputError('images')
                    @each(message in $messages)
                      <div class="invalid-feedback">{{ message }}</div>
                    @end
                  @end
                </div>
              </div>

              <div id="gallery" class="row"></div>

              <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
          </div>
        </div>
      </div>

      <div class="col-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title m-0">Atributos</h5>
          </div>
          <div class="card-body">
            <div id="attributes-area">
            </div>

            <button class="btn btn-primary" id="add-variant-attribute" type="button">Agregar Atributo</button>
          </div>
        </div>

        <div class="card">
          <div class="card-header">
            <h5 class="card-title m-0">Variaciones</h5>
          </div>
          <div class="card-body">
            <pre>{{{JSON.stringify( flashMessages.get('inputErrorsBag'), null, 3)}}}</pre>
          </div>
        </div>
      </div>
    </form>
  @endslot

  @slot('scripts')
    <script src="/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
    <script>
      const attributes = JSON.parse(`{{{ JSON.stringify(attributes) }}}`);

      bsCustomFileInput.init();

      $('#category_id').select2({
        allowClear: true,
        placeholder: 'Seleccione una Opción',
        theme: 'bootstrap4',
      })

      const $btnAddAttribute = $('#add-variant-attribute');
      const $attributesArea = $('#attributes-area');

      let attributesCount = 0;
      const oldValues = JSON.parse(`{{{ JSON.stringify(old('values') ?? {}) }}}`);
      
      for(let key in oldValues) {
        const oldAttrId = key.split('-').at(-1);
        renderAttrSelects(oldAttrId);
      }

      $btnAddAttribute.on('click', () => renderAttrSelects());

      function renderAttrSelects(defaultSeleted = false) {
        attributesCount += 1;
        
        const selectId = `attributes-${ attributesCount }`;
        const valuesId = `values-${ attributesCount }`;

        const html = `
          <div class="attribute-group">
            <div class="form-group">
              <label for="${ selectId }" class="form-label">Atributo</label>
              <select id="${ selectId }" class="w-100">
                <option></option>
                ${ attributes.map(attr => (
                  `<option value="${ attr.id }">${ attr.name }</option>`
                )) }
              </select>
            </div>

            <div class="form-group">
              <label for="${ valuesId }" class="form-label">Valores</label>
              <select multiple id="${ valuesId }" class="w-100">
                <option></option>
              </select>
            </div>
          </div>
        `.trim();

        $attributesArea.append(html);

        $(`#${selectId}`).select2({
          allowClear: true,
          placeholder: 'Seleccione una Opción',
          theme: 'bootstrap4',
        });

        $(`#${valuesId}`).select2({
          allowClear: true,
          placeholder: 'Seleccione una Opción',
          theme: 'bootstrap4',
        });

        $(`#${selectId}`).on('select2:select', handleSelectAttribute);

        if(defaultSeleted) {
          $(`#${selectId}`)
            .val(defaultSeleted)
            .trigger('change')
            .trigger('select2:select');
        }

        $btnAddAttribute.attr('disabled', true);
      }

      function handleSelectAttribute(ev) {
        const $attributeSelect = $(`#${ ev.target.id }`);
        const $selected = $attributeSelect.find(':selected');
        const attribute = attributes.find(attr => attr.id === +$selected.val());

        const $valuesSelect = $attributeSelect.closest('.attribute-group').find(`[id^="values"]`);
        
        $valuesSelect.attr('name', `attributes[attr-${ attribute.id }[values[]]]`);
        $valuesSelect.attr('name', `values[attr-${ attribute.id }[]]`);
        $valuesSelect.empty();

        attribute.values.forEach(value => {
          const option = new Option(value.value, value.id, false, false);
          $valuesSelect.append(option);
        });

        $valuesSelect.trigger('change');
        
        $valuesSelect.on('change', toggleDisabledAddAttribute);

        if(oldValues && Object.keys(oldValues).length) {
          const targetKey = Object.keys(oldValues).find(key => key.endsWith(`${ attribute.id }`));
          $valuesSelect.val(oldValues[targetKey]).trigger('change');
        }
      }

      function toggleDisabledAddAttribute(ev) {
        const selectedValues = $(ev.currentTarget).select2('data');

        $btnAddAttribute.attr('disabled', !(selectedValues.length));
      }
    </script>
  @endslot
@end